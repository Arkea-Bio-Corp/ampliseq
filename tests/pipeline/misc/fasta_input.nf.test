nextflow_pipeline {

    name "Test Workflow main.nf"
    script "main.nf"
    tag "fasta_input"
    tag "pipeline"

    test("Fasta Input") {

        when {
            params {
                outdir                     = "$outputDir"
                config_profile_name        = 'Test fasta input profile'
                config_profile_description = 'Minimal test dataset to check pipeline function with fasta input'
                // Limit resources so that this can run on GitHub Actions
                max_cpus                   = 2
                max_memory                 = '6.GB'
                max_time                   = '6.h'
                // Input data
                input                      = "https://raw.githubusercontent.com/nf-core/test-datasets/ampliseq/testdata/ASV_seqs.fasta"
                dada_ref_taxonomy          = "rdp=18"
                dada_assign_taxlevels      = "K,P,C,O,F,Genus"
                skip_qiime                 = true
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(UTILS.removeNextflowVersion("$outputDir")).match("software_versions") },
                { assert snapshot(path("$outputDir/barrnap/rrna.arc.gff"),
                                path("$outputDir/barrnap/rrna.bac.gff"),
                                path("$outputDir/barrnap/rrna.euk.gff"),
                                path("$outputDir/barrnap/rrna.mito.gff")).match("barrnap") },
                { assert new File("$outputDir/barrnap/summary.tsv").exists() },
                { assert snapshot(path("$outputDir/dada2/ref_taxonomy.rdp_18.txt")).match("dada2") },
                { assert new File("$outputDir/dada2/ASV_tax_species.rdp_18.tsv").exists() },
                { assert new File("$outputDir/dada2/ASV_tax.rdp_18.tsv").exists() },
                { assert snapshot(path("$outputDir/input/ASV_seqs.fasta")).match("input") }
            )
        }
    }
}
