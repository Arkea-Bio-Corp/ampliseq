nextflow_pipeline {

    name "Test Workflow main.nf"
    script "main.nf"
    tag "dada2"
    tag "pipeline"

    test("Custom DADA2 Reference Taxonomy Database") {

        when {
            params {
                outdir                     = "$outputDir"
                config_profile_name        = 'Test custom DADA2 reference taxonomy database profile'
                config_profile_description = 'Minimal test dataset to check --dada_ref_tax_custom'
                // Limit resources so that this can run on GitHub Actions
                max_cpus                   = 2
                max_memory                 = '6.GB'
                max_time                   = '6.h'
                // Input data
                FW_primer                  = "GTGYCAGCMGCCGCGGTAA"
                RV_primer                  = "GGACTACNVGGGTWTCTAAT"
                input                      = "https://raw.githubusercontent.com/nf-core/test-datasets/ampliseq/samplesheets/Samplesheet.tsv"
                // Custom reference taxonomy
                dada_ref_tax_custom        = "https://zenodo.org/record/4310151/files/rdp_train_set_18.fa.gz"
                dada_ref_tax_custom_sp     = "https://zenodo.org/record/4310151/files/rdp_species_assignment_18.fa.gz"
                dada_assign_taxlevels      = "Kingdom,Phylum,Class,Order,Family,Genus"
                // Skip downstream analysis with QIIME2
                skip_qiime                 = true
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(UTILS.removeNextflowVersion("$outputDir")).match("software_versions") },
                { assert snapshot(path("$outputDir/overall_summary.tsv")).match("overall_summary_tsv") },
                { assert snapshot(path("$outputDir/barrnap/rrna.arc.gff"),
                                path("$outputDir/barrnap/rrna.bac.gff"),
                                path("$outputDir/barrnap/rrna.euk.gff"),
                                path("$outputDir/barrnap/rrna.mito.gff")).match("barrnap") },
                { assert new File("$outputDir/barrnap/summary.tsv").exists() },
                { assert snapshot(path("$outputDir/cutadapt/cutadapt_summary.tsv")).match("cutadapt") },
                { assert snapshot(path("$outputDir/dada2/ASV_seqs.fasta"),
                                path("$outputDir/dada2/ASV_table.tsv"),
                                path("$outputDir/dada2/DADA2_stats.tsv"),
                                path("$outputDir/dada2/DADA2_table.rds"),
                                path("$outputDir/dada2/DADA2_table.tsv")).match("dada2") },
                { assert new File("$outputDir/dada2/ASV_tax.user.tsv").exists() },
                { assert new File("$outputDir/dada2/ASV_tax_species.user.tsv").exists() },
                { assert new File("$outputDir/fastqc/sampleID_1_1_fastqc.html").exists() },
                { assert new File("$outputDir/fastqc/sampleID_1_2_fastqc.html").exists() },
                { assert new File("$outputDir/fastqc/sampleID_1a_1_fastqc.html").exists() },
                { assert new File("$outputDir/fastqc/sampleID_1a_2_fastqc.html").exists() },
                { assert new File("$outputDir/fastqc/sampleID_2_1_fastqc.html").exists() },
                { assert new File("$outputDir/fastqc/sampleID_2_2_fastqc.html").exists() },
                { assert new File("$outputDir/fastqc/sampleID_2a_1_fastqc.html").exists() },
                { assert new File("$outputDir/fastqc/sampleID_2a_2_fastqc.html").exists() },
                { assert snapshot(path("$outputDir/input/Samplesheet.tsv")).match("input") },
                { assert snapshot(path("$outputDir/multiqc/multiqc_data/multiqc_fastqc.txt"),
                                path("$outputDir/multiqc/multiqc_data/multiqc_general_stats.txt"),
                                path("$outputDir/multiqc/multiqc_data/multiqc_cutadapt.txt")).match("multiqc") }
            )
        }
    }
}
