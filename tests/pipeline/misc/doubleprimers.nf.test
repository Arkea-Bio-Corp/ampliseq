nextflow_pipeline {

    name "Test Workflow main.nf"
    script "main.nf"
    tag "doubleprimers"
    tag "pipeline"

    test("Double-Primers") {

        when {
            params {
                outdir                     = "$outputDir"
                config_profile_name        = 'Test doubleprimers profile'
                config_profile_description = 'Minimal test dataset to check pipeline function when removing double primers'
                // Limit resources so that this can run on GitHub Actions
                max_cpus                   = 2
                max_memory                 = '6.GB'
                max_time                   = '6.h'
                // Input data
                FW_primer                  = "NNNNCCTAHGGGRBGCAGCAG"
                RV_primer                  = "GACTACHVGGGTATCTAATCC"
                double_primer              = true
                dada_ref_taxonomy          = false
                input                      = "https://raw.githubusercontent.com/nf-core/test-datasets/ampliseq/samplesheets/Samplesheet_double_primer.tsv"
                trunc_qmin                 = 30
                skip_fastqc                = true
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(UTILS.removeNextflowVersion("$outputDir")).match("software_versions") },
                { assert snapshot(path("$outputDir/overall_summary.tsv")).match("overall_summary_tsv") },
                { assert snapshot(path("$outputDir/barrnap/rrna.arc.gff"),
                                path("$outputDir/barrnap/rrna.bac.gff"),
                                path("$outputDir/barrnap/rrna.euk.gff"),
                                path("$outputDir/barrnap/rrna.mito.gff")).match("barrnap") },
                { assert new File("$outputDir/barrnap/summary.tsv").exists() },
                { assert snapshot(path("$outputDir/cutadapt/cutadapt_summary.tsv")).match("cutadapt") },
                { assert snapshot(path("$outputDir/dada2/ASV_seqs.fasta"),
                                path("$outputDir/dada2/ASV_table.tsv"),
                                path("$outputDir/dada2/DADA2_stats.tsv"),
                                path("$outputDir/dada2/DADA2_table.rds"),
                                path("$outputDir/dada2/DADA2_table.tsv")).match("dada2") },
                { assert new File("$outputDir/qiime2/input/rep-seqs.qza").exists() },
                { assert new File("$outputDir/qiime2/input/table.qza").exists() },
                { assert snapshot(path("$outputDir/input/Samplesheet_double_primer.tsv")).match("input") },
                { assert snapshot(path("$outputDir/multiqc/multiqc_data/multiqc_general_stats.txt"),
                                path("$outputDir/multiqc/multiqc_data/multiqc_cutadapt.txt")).match("multiqc") }
            )
        }
    }
}
