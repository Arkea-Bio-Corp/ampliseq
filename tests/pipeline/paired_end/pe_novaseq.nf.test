nextflow_pipeline {

    name "Test Workflow main.nf"
    script "main.nf"
    tag "novaseq"
    tag "pipeline"

    test("Paired-End Novaseq") {

        when {
            params {
                outdir                     = "$outputDir"
                config_profile_name        = 'Test profile Novaseq data'
                config_profile_description = 'Minimal test dataset to check pipeline function with Novaseq data'
                // Limit resources so that this can run on GitHub Actions
                max_cpus                   = 2
                max_memory                 = '6.GB'
                max_time                   = '6.h'
                // Input data
                input                      = "https://raw.githubusercontent.com/nf-core/test-datasets/ampliseq/samplesheets/Samplesheet_novaseq.tsv"
                illumina_novaseq           = true
                // Skip steps
                skip_cutadapt              = true
                skip_barrnap               = true
                skip_taxonomy              = true
                skip_qiime                 = true
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(UTILS.removeNextflowVersion("$outputDir")).match("software_versions") },
                { assert snapshot(path("$outputDir/dada2/ASV_seqs.fasta"),
                                path("$outputDir/dada2/ASV_table.tsv"),
                                path("$outputDir/dada2/DADA2_stats.tsv"),
                                path("$outputDir/dada2/DADA2_table.rds"),
                                path("$outputDir/dada2/DADA2_table.tsv")).match("dada2") },
                { assert new File("$outputDir/fastqc/S1_1_fastqc.html").exists() },
                { assert new File("$outputDir/fastqc/S1_2_fastqc.html").exists() },
                { assert new File("$outputDir/fastqc/S2_1_fastqc.html").exists() },
                { assert new File("$outputDir/fastqc/S2_2_fastqc.html").exists() },
                { assert snapshot(path("$outputDir/input/Samplesheet_novaseq.tsv")).match("input") },
                { assert snapshot(path("$outputDir/multiqc/multiqc_data/multiqc_fastqc.txt"),
                                path("$outputDir/multiqc/multiqc_data/multiqc_general_stats.txt")).match("multiqc") }
            )
        }
    }
}
