nextflow_pipeline {

    name "Test Workflow main.nf"
    script "main.nf"
    tag "pacbio_its"
    tag "pipeline"

    test("Paired-End Pacbio ITS") {

        when {
            params {
                outdir                     = "$outputDir"
                config_profile_name        = 'Test profile PacBio ITS'
                config_profile_description = 'Minimal test dataset to check pipeline function with PacBio ITS sequences and options --cut_its (set to "full") and --addsh enabled'
                // Limit resources so that this can run on GitHub Actions
                max_cpus                   = 2
                max_memory                 = '6.GB'
                max_time                   = '6.h'
                // Input data
                FW_primer                  = "CTTGGTCATTTAGAGGAAGTAA"
                RV_primer                  = "TCCTGAGGGAAACTTCG"
                dada_ref_taxonomy          = "unite-fungi"
                input                      = "https://raw.githubusercontent.com/nf-core/test-datasets/ampliseq/samplesheets/Samplesheet_pacbio_ITS.tsv"
                metadata                   = "https://raw.githubusercontent.com/nf-core/test-datasets/ampliseq/samplesheets/Metadata_pacbio_ITS.tsv"
                pacbio                     = true
                max_ee                     = 12
                cut_its                    = "full"
                addsh                      = true
                skip_qiime                 = true
                sbdiexport                 = true
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(UTILS.removeNextflowVersion("$outputDir")).match("software_versions") },
                { assert snapshot(path("$outputDir/overall_summary.tsv")).match("overall_summary_tsv") },
                { assert snapshot(path("$outputDir/assignsh/ASV_tax_species_SH.unite-fungi.tsv")).match("assignsh") },
                { assert new File("$outputDir/assignsh/ASV_ITS_tax.vsearch.txt").exists() },
                { assert snapshot(path("$outputDir/barrnap/rrna.arc.gff"),
                                path("$outputDir/barrnap/rrna.bac.gff"),
                                path("$outputDir/barrnap/rrna.euk.gff"),
                                path("$outputDir/barrnap/rrna.mito.gff")).match("barrnap") },
                { assert new File("$outputDir/barrnap/summary.tsv").exists() },
                { assert snapshot(path("$outputDir/cutadapt/cutadapt_summary.tsv")).match("cutadapt") },
                { assert new File("$outputDir/cutadapt/pb1.trimmed.cutadapt.log").exists() },
                { assert new File("$outputDir/cutadapt/pb2.trimmed.cutadapt.log").exists() },
                { assert new File("$outputDir/cutadapt/pb3.trimmed.cutadapt.log").exists() },
                { assert snapshot(path("$outputDir/dada2/ASV_seqs.fasta"),
                                path("$outputDir/dada2/ASV_table.tsv"),
                                path("$outputDir/dada2/ref_taxonomy.unite-fungi.txt"),
                                path("$outputDir/dada2/DADA2_stats.tsv"),
                                path("$outputDir/dada2/DADA2_table.rds"),
                                path("$outputDir/dada2/DADA2_table.tsv")).match("dada2") },
                { assert new File("$outputDir/dada2/ASV_tax.unite-fungi.tsv").exists() },
                { assert new File("$outputDir/dada2/ASV_tax_species.unite-fungi.tsv").exists() },
                { assert new File("$outputDir/dada2/ASV_ITS_tax.unite-fungi.tsv").exists() },
                { assert new File("$outputDir/dada2/ASV_ITS_tax_species.unite-fungi.tsv").exists() },
                { assert new File("$outputDir/fastqc/pb1_fastqc.html").exists() },
                { assert new File("$outputDir/fastqc/pb2_fastqc.html").exists() },
                { assert new File("$outputDir/fastqc/pb3_fastqc.html").exists() },
                { assert snapshot(path("$outputDir/input/Samplesheet_pacbio_ITS.tsv"),
                                path("$outputDir/input/Metadata_pacbio_ITS.tsv")).match("input") },
                { assert snapshot(path("$outputDir/itsx/ASV_ITS_seqs.full.fasta"),
                                path("$outputDir/itsx/ITSx.args.txt")).match("itsx") },
                { assert new File("$outputDir/itsx/ASV_ITS_seqs.summary.txt").exists() },
                { assert snapshot(path("$outputDir/multiqc/multiqc_data/multiqc_fastqc.txt"),
                                path("$outputDir/multiqc/multiqc_data/multiqc_general_stats.txt"),
                                path("$outputDir/multiqc/multiqc_data/multiqc_cutadapt.txt")).match("multiqc") },
                { assert snapshot(path("$outputDir/SBDI/dna.tsv"),
                                path("$outputDir/SBDI/emof.tsv"),
                                path("$outputDir/SBDI/event.tsv")).match("SBDI") },
                { assert new File("$outputDir/SBDI/annotation.tsv").exists() },
                { assert new File("$outputDir/SBDI/asv-table.tsv").exists() }
            )
        }
    }
}
