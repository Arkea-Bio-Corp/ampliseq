/*
========================================================================================
    Config file for defining DSL2 per module options and publishing paths
========================================================================================
    Available keys to override module options:
        ext.args            = Additional arguments appended to command in module.
        ext.args2           = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3           = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix          = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: 'copy',
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: FASTQC {
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: 'copy',
            pattern: "*.html"
        ]
    }

    withName: NFCORE_AMPLISEQ:AMPLISEQ:CUTADAPT_WORKFLOW:CUTADAPT {
        ext.args = [
            "--minimum-length 1",
            params.pacbio ? "--rc -g ${params.FW_primer}...${RV_primer_RevComp}" :
                params.iontorrent ? "--rc -g ${params.FW_primer}...${RV_primer_RevComp}" :
                params.single_end ? "-g ${params.FW_primer}" :
                "-g ${params.FW_primer} -G ${params.RV_primer}",
            params.retain_untrimmed ? '' : "--discard-untrimmed"
        ].join(' ').trim()
        ext.prefix = { "${meta.id}.trimmed" }
        publishDir = [
            path: { "${params.outdir}/cutadapt" },
            mode: 'copy',
            pattern: "*.log"
        ]
    }

    withName: NFCORE_AMPLISEQ:AMPLISEQ:CUTADAPT_WORKFLOW:CUTADAPT_READTHROUGH {
        ext.args = "--minimum-length 1 -a ${RV_primer_RevComp} -A ${FW_primer_RevComp}"
        ext.prefix = { "${meta.id}.read-through" }
        publishDir = [
            path: { "${params.outdir}/cutadapt" },
            mode: 'copy',
            pattern: "*.log"
        ]
    }

    withName: NFCORE_AMPLISEQ:AMPLISEQ:CUTADAPT_WORKFLOW:CUTADAPT_DOUBLEPRIMER {
        ext.args = [
            "--discard-trimmed --minimum-length 1",
            params.pacbio ? "--rc -g ${params.FW_primer}...${RV_primer_RevComp}" :
                params.iontorrent ? "--rc -g ${params.FW_primer}...${RV_primer_RevComp}" :
                params.single_end ? "-g ${params.FW_primer}" :
                "-g ${params.FW_primer} -G ${params.RV_primer}"
        ].join(' ').trim()
        ext.prefix = { "${meta.id}.double-primer" }
        publishDir = [
            path: { "${params.outdir}/cutadapt" },
            mode: 'copy',
            pattern: "*.log"
        ]
    }

    withName: NFCORE_AMPLISEQ:AMPLISEQ:CUTADAPT_WORKFLOW:CUTADAPT_SUMMARY {
        publishDir = [
            path: { "${params.outdir}/cutadapt/summary" },
            enabled: false
        ]
    }

    withName: NFCORE_AMPLISEQ:AMPLISEQ:CUTADAPT_WORKFLOW:CUTADAPT_SUMMARY_MERGE {
        publishDir = [
            path: { "${params.outdir}/cutadapt" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: NFCORE_AMPLISEQ:AMPLISEQ:CUTADAPT_TAXONOMY {
        ext.args = "--discard-untrimmed --minimum-length 1 -g ${params.FW_primer}...${RV_primer_RevComp}"
        publishDir = [
            path: { "${params.outdir}/dada2" },
            mode: 'copy',
            pattern: "*.log"
        ]
    }

    withName: NFCORE_AMPLISEQ:AMPLISEQ:DADA2_QUALITY {
        ext.args = "5e+06"
        publishDir = [
            [
                path: { "${params.outdir}/dada2/QC" },
                mode: 'copy',
                pattern: "*.pdf"
            ],
            [
                path: { "${params.outdir}/dada2/args" },
                mode: 'copy',
                pattern: "*.args.txt"
            ]
        ]
    }

    withName: TRUNCLEN {
        ext.args = "${params.trunc_qmin} ${params.trunc_rmin}"
        publishDir = [
            path: { "${params.outdir}/dada2" },
            enabled: false
        ]
    }

    withName: NFCORE_AMPLISEQ:AMPLISEQ:DADA2_FILTNTRIM {
        ext.args = [
            'maxN = 0, truncQ = 2, trimRight = 0, minQ = 0, rm.lowcomplex = 0, orient.fwd = NULL, matchIDs = FALSE, id.sep = "\\\\s", id.field = NULL, n = 1e+05, OMP = TRUE, qualityType = "Auto"',
            single_end ? "maxEE = ${params.max_ee}" : "maxEE = c(${params.max_ee}, ${params.max_ee})",
            params.pacbio ? "trimLeft = 0, minLen = ${params.min_len}, maxLen = $max_len, rm.phix = FALSE" :
                params.iontorrent ? "trimLeft = 15, minLen = ${params.min_len}, maxLen = $max_len, rm.phix = TRUE" :
                params.illumina_pe_its ? "trimLeft = 0, minLen = ${params.min_len}, maxLen = $max_len, rm.phix = TRUE" :
                "trimLeft = 0, minLen = ${params.min_len}, maxLen = $max_len, rm.phix = TRUE"
        ].join(',').trim()
        publishDir = [
            path: { "${params.outdir}/dada2/args" },
            mode: 'copy',
            pattern: "*.args.txt"
        ]
    }

    withName: NFCORE_AMPLISEQ:AMPLISEQ:DADA2_ERR {
        ext.args = [
            'nbases = 1e8, nreads = NULL, randomize = FALSE, MAX_CONSIST = 10, OMEGA_C = 0, qualityType = "Auto"',
            params.pacbio ? "errorEstimationFunction = PacBioErrfun" : "errorEstimationFunction = loessErrfun"
        ].join(',').trim()
        publishDir = [
            [
                path: { "${params.outdir}/dada2/QC" },
                mode: 'copy',
                pattern: "*{.pdf,convergence.txt}"
            ],
            [
            path: { "${params.outdir}/dada2/args" },
            mode: 'copy',
            pattern: "*.args.txt"
            ],
            [
            path: { "${params.outdir}/dada2/log" },
            mode: 'copy',
            pattern: "*.log"
            ]
        ]
    }

    withName: NFCORE_AMPLISEQ:AMPLISEQ:DADA2_DENOISING {
        // standard setting can be inspected with getDadaOpt(option = NULL)
        ext.args = [
            'selfConsist = FALSE, priors = character(0), DETECT_SINGLETONS = FALSE, GAPLESS = TRUE, GAP_PENALTY = -8, GREEDY = TRUE, KDIST_CUTOFF = 0.42, MATCH = 5, MAX_CLUST = 0, MAX_CONSIST = 10, MIN_ABUNDANCE = 1, MIN_FOLD = 1, MIN_HAMMING = 1, MISMATCH = -4, OMEGA_A = 1e-40, OMEGA_C = 1e-40, OMEGA_P = 1e-4, PSEUDO_ABUNDANCE = Inf, PSEUDO_PREVALENCE = 2, SSE = 2, USE_KMERS = TRUE, USE_QUALS = TRUE, VECTORIZED_ALIGNMENT = TRUE',
            params.iontorrent ? "BAND_SIZE = 32, HOMOPOLYMER_GAP_PENALTY = -1" : "BAND_SIZE = 16, HOMOPOLYMER_GAP_PENALTY = NULL",
            params.sample_inference == "pseudo" ? "pool = \"pseudo\"" :
                params.sample_inference == "pooled" ? "pool = TRUE" : "pool = FALSE"
         ].join(',').trim()
        // setting from https://rdrr.io/bioc/dada2/man/mergePairs.html & https://rdrr.io/bioc/dada2/man/nwalign.html & match = getDadaOpt("MATCH"), mismatch = getDadaOpt("MISMATCH"), gap = getDadaOpt("GAP_PENALTY"), missing from the list below is: 'band = -1'
        ext.args2 = [
            'minOverlap = 12, maxMismatch = 0, returnRejects = FALSE, propagateCol = character(0), trimOverhang = FALSE, match = 1, mismatch = -64, gap = -64, homo_gap = NULL, endsfree = TRUE, vec = FALSE',
            params.concatenate_reads ? "justConcatenate = TRUE" : "justConcatenate = FALSE"
        ].join(',').trim()
        publishDir = [
            [
                path: { "${params.outdir}/dada2/args" },
                mode: 'copy',
                pattern: "*.args.txt"
            ],
            [
                path: { "${params.outdir}/dada2/log" },
                mode: 'copy',
                pattern: "*.log"
            ]
        ]
    }

    withName: NFCORE_AMPLISEQ:AMPLISEQ:DADA2_RMCHIMERA {
        ext.args = 'method="consensus", minSampleFraction = 0.9, ignoreNNegatives = 1, minFoldParentOverAbundance = 2, minParentAbundance = 8, allowOneOff = FALSE, minOneOffParentDistance = 4, maxShift = 16'
        publishDir = [
            path: { "${params.outdir}/dada2/args" },
            mode: 'copy',
            pattern: "*.args.txt"
        ]
    }

    withName: NFCORE_AMPLISEQ:AMPLISEQ:DADA2_STATS {
        publishDir = [
            path: { "${params.outdir}/dada2" },
            enables: false
        ]
    }

    withName: NFCORE_AMPLISEQ:AMPLISEQ:DADA2_MERGE {
        publishDir = [
            path: { "${params.outdir}/dada2" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: NFCORE_AMPLISEQ:AMPLISEQ:MERGE_STATS {
        publishDir = [
            path: { "${params.outdir}" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: NFCORE_AMPLISEQ:AMPLISEQ:ITSX_CUTASV {
        ext.args = '-t all --preserve T --date F --positions F --graphical F --save_regions none'
        publishDir = [
            path: { "${params.outdir}/itsx_cutasv" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: NFCORE_AMPLISEQ:AMPLISEQ:FORMAT_TAXONOMY {
        publishDir = [
            path: { "${params.outdir}/dada2" },
            mode: 'copy',
            pattern: "ref_taxonomy.txt"
        ]
    }

    withName: NFCORE_AMPLISEQ:AMPLISEQ:DADA2_TAXONOMY {
        ext.args = [
            'minBoot = 50',
            params.pacbio ? "tryRC = TRUE" : "",
            params.iontorrent ? "tryRC = TRUE" : ""
        ].join(',').trim()
        publishDir = [
            [
                path: { "${params.outdir}/dada2/args" },
                mode: 'copy',
                pattern: "*.args.txt"
            ],
            [
                path: { "${params.outdir}/dada2" },
                mode: 'copy',
                pattern: "*.tsv"
            ]
        ]
    }

    withName: NFCORE_AMPLISEQ:AMPLISEQ:DADA2_ADDSPECIES {
        ext.args = [
            'allowMultiple = FALSE, n = 1e5',
            params.pacbio ? "tryRC = TRUE" : "",
            params.iontorrent ? "tryRC = TRUE" : ""
        ].join(',').trim()
        publishDir = [
            [
                path: { "${params.outdir}/dada2/args" },
                mode: 'copy',
                pattern: "*.args.txt"
            ],
            [
                path: { "${params.outdir}/dada2" },
                mode: 'copy',
                pattern: "*.tsv"
            ]
        ]
    }

    withName: NFCORE_AMPLISEQ:AMPLISEQ:FORMAT_TAXONOMY_QIIME {
        publishDir = [
            path: { "${params.outdir}/qiime2/taxonomy" },
            mode: 'copy',
            pattern: "ref_taxonomy.txt"
        ]
    }

    withName: NFCORE_AMPLISEQ:AMPLISEQ:QIIME2_PREPTAX {
        publishDir = [
            path: { "${params.outdir}/qiime2/taxonomy" },
            mode: 'copy',
            pattern: "*{-classifier.qza,.tsv}"
        ]
    }

    withName: NFCORE_AMPLISEQ:AMPLISEQ:QIIME2_TAXONOMY {
        publishDir = [
            path: { "${params.outdir}/qiime2/taxonomy" },
            mode: 'copy',
            pattern: "*.tsv"
        ]
    }

    withName: NFCORE_AMPLISEQ:AMPLISEQ:QIIME2_INASV {
        publishDir = [
            path: { "${params.outdir}/qiime2/in_asv" },
            enabled: false
        ]
    }

    withName: NFCORE_AMPLISEQ:AMPLISEQ:QIIME2_INSEQ {
        publishDir = [
            path: { "${params.outdir}/qiime2/in_seq" },
            enabled: false
        ]
    }

    withName: NFCORE_AMPLISEQ:AMPLISEQ:QIIME2_FILTERTAXA {
        publishDir = [
            path: { "${params.outdir}/qiime2/filtertaxa" },
            enabled: false
        ]
    }

    withName: NFCORE_AMPLISEQ:AMPLISEQ:FILTER_STATS {
        publishDir = [
            path: { "${params.outdir}/qiime2/abundance_tables" },
            mode: 'copy',
            pattern: "*.tsv"
        ]
    }

    withName: NFCORE_AMPLISEQ:AMPLISEQ:QIIME2_BARPLOT {
        publishDir = [
            path: { "${params.outdir}/qiime2" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: QIIME2_EXPORT_ABSOLUTE {
        publishDir = [
            [
                path: { "${params.outdir}/qiime2/representative_sequences" },
                mode: 'copy',
                pattern: "{descriptive_stats.tsv,seven_number_summary.tsv}"
            ],
            [
                path: { "${params.outdir}/qiime2/abundance_tables" },
                mode: 'copy',
                pattern: "*.{tsv,biom}"
            ],
            [
                path: { "${params.outdir}/qiime2/representative_sequences" },
                mode: 'copy',
                pattern: "*.fasta"
            ]
        ]
    }

    withName: QIIME2_EXPORT_RELASV {
        publishDir = [
            path: { "${params.outdir}/qiime2/rel_abundance_tables" },
            mode: 'copy',
            pattern: "*.tsv"
        ]
    }

    withName: QIIME2_EXPORT_RELTAX {
        publishDir = [
            path: { "${params.outdir}/qiime2/rel_abundance_tables" },
            mode: 'copy',
            pattern: "*.tsv"
        ]
    }

    withName: COMBINE_TABLE {
        publishDir = [
            path: { "${params.outdir}/qiime2/rel_abundance_tables" },
            mode: 'copy',
            pattern: "*.tsv"
        ]
    }

    withName: QIIME2_TREE {
        publishDir = [
            path: { "${params.outdir}/qiime2/phylogenetic_tree" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: QIIME2_ALPHARAREFACTION {
        publishDir = [
            path: { "${params.outdir}/qiime2" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: QIIME2_DIVERSITY_CORE {
        publishDir = [
            path: { "${params.outdir}/qiime2/diversity" },
            mode: 'copy',
            pattern: "*rarefaction.txt"
        ]
    }

    withName: QIIME2_DIVERSITY_ALPHA {
        publishDir = [
            path: { "${params.outdir}/qiime2/diversity" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: QIIME2_DIVERSITY_BETA {
        publishDir = [
            path: { "${params.outdir}/qiime2/diversity" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: QIIME2_DIVERSITY_BETAORD {
        publishDir = [
            path: { "${params.outdir}/qiime2/diversity" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: QIIME2_FILTERASV {
        publishDir = [
            path: { "${params.outdir}/qiime2/filter_asv" },
            enabled: false
        ]
    }

    withName: QIIME2_ANCOM_TAX {
        publishDir = [
            path: { "${params.outdir}/qiime2" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: QIIME2_ANCOM_ASV {
        publishDir = [
            path: { "${params.outdir}/qiime2" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: QIIME2_INTAX {
        publishDir = [
            path: { "${params.outdir}/qiime2/in_tax" },
            enabled: false
        ]
    }

    withName: PICRUST {
        ext.args = "-t epa-ng --remove_intermediate"
        publishDir = [
            path: { "${params.outdir}/picrust" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SBDIEXPORT {
        ext.args = [
            params.single_end ? 'single' : 'paired',
            "${params.FW_primer}",
            "${params.RV_primer}"
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/SBDI" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SBDIEXPORTREANNOTATE {
        publishDir = [
            path: { "${params.outdir}/SBDI" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: 'copy',
            pattern: '*_versions.yml'
        ]
    }
}

if (!params.skip_multiqc) {
    process {
        withName: MULTIQC {
            ext.args   = params.multiqc_title ? "--title \"$params.multiqc_title\"" : ''
            publishDir = [
                path: "${params.outdir}/multiqc",
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}
